/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUsuarioTemaArgs } from "./CreateUsuarioTemaArgs";
import { UpdateUsuarioTemaArgs } from "./UpdateUsuarioTemaArgs";
import { DeleteUsuarioTemaArgs } from "./DeleteUsuarioTemaArgs";
import { UsuarioTemaFindManyArgs } from "./UsuarioTemaFindManyArgs";
import { UsuarioTemaFindUniqueArgs } from "./UsuarioTemaFindUniqueArgs";
import { UsuarioTema } from "./UsuarioTema";
import { Theme } from "../../theme/base/Theme";
import { User } from "../../user/base/User";
import { UsuarioTemaService } from "../usuarioTema.service";

@graphql.Resolver(() => UsuarioTema)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class UsuarioTemaResolverBase {
  constructor(
    protected readonly service: UsuarioTemaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UsuarioTema",
    action: "read",
    possession: "any",
  })
  async _usuarioTemasMeta(
    @graphql.Args() args: UsuarioTemaFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UsuarioTema])
  @nestAccessControl.UseRoles({
    resource: "UsuarioTema",
    action: "read",
    possession: "any",
  })
  async usuarioTemas(
    @graphql.Args() args: UsuarioTemaFindManyArgs
  ): Promise<UsuarioTema[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UsuarioTema, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UsuarioTema",
    action: "read",
    possession: "own",
  })
  async usuarioTema(
    @graphql.Args() args: UsuarioTemaFindUniqueArgs
  ): Promise<UsuarioTema | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UsuarioTema)
  @nestAccessControl.UseRoles({
    resource: "UsuarioTema",
    action: "create",
    possession: "any",
  })
  async createUsuarioTema(
    @graphql.Args() args: CreateUsuarioTemaArgs
  ): Promise<UsuarioTema> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        theme: args.data.theme
          ? {
              connect: args.data.theme,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UsuarioTema)
  @nestAccessControl.UseRoles({
    resource: "UsuarioTema",
    action: "update",
    possession: "any",
  })
  async updateUsuarioTema(
    @graphql.Args() args: UpdateUsuarioTemaArgs
  ): Promise<UsuarioTema | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          theme: args.data.theme
            ? {
                connect: args.data.theme,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UsuarioTema)
  @nestAccessControl.UseRoles({
    resource: "UsuarioTema",
    action: "delete",
    possession: "any",
  })
  async deleteUsuarioTema(
    @graphql.Args() args: DeleteUsuarioTemaArgs
  ): Promise<UsuarioTema | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Theme, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Theme",
    action: "read",
    possession: "any",
  })
  async theme(@graphql.Parent() parent: UsuarioTema): Promise<Theme | null> {
    const result = await this.service.getTheme(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: UsuarioTema): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
