/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateThemeArgs } from "./CreateThemeArgs";
import { UpdateThemeArgs } from "./UpdateThemeArgs";
import { DeleteThemeArgs } from "./DeleteThemeArgs";
import { ThemeFindManyArgs } from "./ThemeFindManyArgs";
import { ThemeFindUniqueArgs } from "./ThemeFindUniqueArgs";
import { Theme } from "./Theme";
import { UsuarioTemaFindManyArgs } from "../../usuarioTema/base/UsuarioTemaFindManyArgs";
import { UsuarioTema } from "../../usuarioTema/base/UsuarioTema";
import { ThemeService } from "../theme.service";

@graphql.Resolver(() => Theme)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ThemeResolverBase {
  constructor(
    protected readonly service: ThemeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Theme",
    action: "read",
    possession: "any",
  })
  async _themesMeta(
    @graphql.Args() args: ThemeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Theme])
  @nestAccessControl.UseRoles({
    resource: "Theme",
    action: "read",
    possession: "any",
  })
  async themes(@graphql.Args() args: ThemeFindManyArgs): Promise<Theme[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Theme, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Theme",
    action: "read",
    possession: "own",
  })
  async theme(
    @graphql.Args() args: ThemeFindUniqueArgs
  ): Promise<Theme | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Theme)
  @nestAccessControl.UseRoles({
    resource: "Theme",
    action: "create",
    possession: "any",
  })
  async createTheme(@graphql.Args() args: CreateThemeArgs): Promise<Theme> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Theme)
  @nestAccessControl.UseRoles({
    resource: "Theme",
    action: "update",
    possession: "any",
  })
  async updateTheme(
    @graphql.Args() args: UpdateThemeArgs
  ): Promise<Theme | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Theme)
  @nestAccessControl.UseRoles({
    resource: "Theme",
    action: "delete",
    possession: "any",
  })
  async deleteTheme(
    @graphql.Args() args: DeleteThemeArgs
  ): Promise<Theme | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UsuarioTema])
  @nestAccessControl.UseRoles({
    resource: "UsuarioTema",
    action: "read",
    possession: "any",
  })
  async userTheme(
    @graphql.Parent() parent: Theme,
    @graphql.Args() args: UsuarioTemaFindManyArgs
  ): Promise<UsuarioTema[]> {
    const results = await this.service.findUserTheme(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
