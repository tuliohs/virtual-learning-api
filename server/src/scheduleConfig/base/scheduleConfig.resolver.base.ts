/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateScheduleConfigArgs } from "./CreateScheduleConfigArgs";
import { UpdateScheduleConfigArgs } from "./UpdateScheduleConfigArgs";
import { DeleteScheduleConfigArgs } from "./DeleteScheduleConfigArgs";
import { ScheduleConfigFindManyArgs } from "./ScheduleConfigFindManyArgs";
import { ScheduleConfigFindUniqueArgs } from "./ScheduleConfigFindUniqueArgs";
import { ScheduleConfig } from "./ScheduleConfig";
import { User } from "../../user/base/User";
import { ScheduleConfigService } from "../scheduleConfig.service";

@graphql.Resolver(() => ScheduleConfig)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ScheduleConfigResolverBase {
  constructor(
    protected readonly service: ScheduleConfigService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ScheduleConfig",
    action: "read",
    possession: "any",
  })
  async _scheduleConfigsMeta(
    @graphql.Args() args: ScheduleConfigFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ScheduleConfig])
  @nestAccessControl.UseRoles({
    resource: "ScheduleConfig",
    action: "read",
    possession: "any",
  })
  async scheduleConfigs(
    @graphql.Args() args: ScheduleConfigFindManyArgs
  ): Promise<ScheduleConfig[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ScheduleConfig, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ScheduleConfig",
    action: "read",
    possession: "own",
  })
  async scheduleConfig(
    @graphql.Args() args: ScheduleConfigFindUniqueArgs
  ): Promise<ScheduleConfig | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScheduleConfig)
  @nestAccessControl.UseRoles({
    resource: "ScheduleConfig",
    action: "create",
    possession: "any",
  })
  async createScheduleConfig(
    @graphql.Args() args: CreateScheduleConfigArgs
  ): Promise<ScheduleConfig> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScheduleConfig)
  @nestAccessControl.UseRoles({
    resource: "ScheduleConfig",
    action: "update",
    possession: "any",
  })
  async updateScheduleConfig(
    @graphql.Args() args: UpdateScheduleConfigArgs
  ): Promise<ScheduleConfig | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScheduleConfig)
  @nestAccessControl.UseRoles({
    resource: "ScheduleConfig",
    action: "delete",
    possession: "any",
  })
  async deleteScheduleConfig(
    @graphql.Args() args: DeleteScheduleConfigArgs
  ): Promise<ScheduleConfig | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: ScheduleConfig): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
