# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BooleanNullableFilter {
  equals: Boolean
  not: Boolean
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EnumScheduleConfigDayWeek {
  Domingo
  Quarta
  Quinta
  SBado
  Segunda
  Sexta
  TerA
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createPreRegister(data: PreRegisterCreateInput!): PreRegister!
  createScheduleConfig(data: ScheduleConfigCreateInput!): ScheduleConfig!
  createTheme(data: ThemeCreateInput!): Theme!
  createUser(data: UserCreateInput!): User!
  createUsuarioTema(data: UsuarioTemaCreateInput!): UsuarioTema!
  deletePreRegister(where: PreRegisterWhereUniqueInput!): PreRegister!
  deleteScheduleConfig(where: ScheduleConfigWhereUniqueInput!): ScheduleConfig!
  deleteTheme(where: ThemeWhereUniqueInput!): Theme!
  deleteUser(where: UserWhereUniqueInput!): User!
  deleteUsuarioTema(where: UsuarioTemaWhereUniqueInput!): UsuarioTema!
  login(credentials: Credentials!): UserInfo!
  updatePreRegister(data: PreRegisterUpdateInput!, where: PreRegisterWhereUniqueInput!): PreRegister!
  updateScheduleConfig(data: ScheduleConfigUpdateInput!, where: ScheduleConfigWhereUniqueInput!): ScheduleConfig!
  updateTheme(data: ThemeUpdateInput!, where: ThemeWhereUniqueInput!): Theme!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updateUsuarioTema(data: UsuarioTemaUpdateInput!, where: UsuarioTemaWhereUniqueInput!): UsuarioTema!
}

type PreRegister {
  createdAt: DateTime!
  email: String
  id: String!
  message: String
  name: String
  origin: String
  phone: String
  processed: Boolean
  updatedAt: DateTime!
}

input PreRegisterCreateInput {
  email: String
  message: String
  name: String
  origin: String
  phone: String
  processed: Boolean
}

input PreRegisterOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  message: SortOrder
  name: SortOrder
  origin: SortOrder
  phone: SortOrder
  processed: SortOrder
  updatedAt: SortOrder
}

input PreRegisterUpdateInput {
  email: String
  message: String
  name: String
  origin: String
  phone: String
  processed: Boolean
}

input PreRegisterWhereInput {
  email: StringNullableFilter
  id: StringFilter
  message: StringNullableFilter
  name: StringNullableFilter
  origin: StringNullableFilter
  phone: StringNullableFilter
  processed: BooleanNullableFilter
}

input PreRegisterWhereUniqueInput {
  id: String!
}

type Query {
  _preRegistersMeta(orderBy: [PreRegisterOrderByInput!], skip: Float, take: Float, where: PreRegisterWhereInput): MetaQueryPayload!
  _scheduleConfigsMeta(orderBy: [ScheduleConfigOrderByInput!], skip: Float, take: Float, where: ScheduleConfigWhereInput): MetaQueryPayload!
  _themesMeta(orderBy: [ThemeOrderByInput!], skip: Float, take: Float, where: ThemeWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  _usuarioTemasMeta(orderBy: [UsuarioTemaOrderByInput!], skip: Float, take: Float, where: UsuarioTemaWhereInput): MetaQueryPayload!
  preRegister(where: PreRegisterWhereUniqueInput!): PreRegister
  preRegisters(orderBy: [PreRegisterOrderByInput!], skip: Float, take: Float, where: PreRegisterWhereInput): [PreRegister!]!
  scheduleConfig(where: ScheduleConfigWhereUniqueInput!): ScheduleConfig
  scheduleConfigs(orderBy: [ScheduleConfigOrderByInput!], skip: Float, take: Float, where: ScheduleConfigWhereInput): [ScheduleConfig!]!
  theme(where: ThemeWhereUniqueInput!): Theme
  themes(orderBy: [ThemeOrderByInput!], skip: Float, take: Float, where: ThemeWhereInput): [Theme!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
  usuarioTema(where: UsuarioTemaWhereUniqueInput!): UsuarioTema
  usuarioTemas(orderBy: [UsuarioTemaOrderByInput!], skip: Float, take: Float, where: UsuarioTemaWhereInput): [UsuarioTema!]!
}

enum QueryMode {
  Default
  Insensitive
}

type ScheduleConfig {
  createdAt: DateTime!
  dayWeek: EnumScheduleConfigDayWeek
  id: String!
  timeEnd: String!
  timeStart: String!
  updatedAt: DateTime!
  user: User
}

input ScheduleConfigCreateInput {
  dayWeek: EnumScheduleConfigDayWeek
  timeEnd: String!
  timeStart: String!
  user: UserWhereUniqueInput
}

input ScheduleConfigCreateNestedManyWithoutUsersInput {
  connect: [ScheduleConfigWhereUniqueInput!]
}

input ScheduleConfigListRelationFilter {
  every: ScheduleConfigWhereInput
  none: ScheduleConfigWhereInput
  some: ScheduleConfigWhereInput
}

input ScheduleConfigOrderByInput {
  createdAt: SortOrder
  dayWeek: SortOrder
  id: SortOrder
  timeEnd: SortOrder
  timeStart: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ScheduleConfigUpdateInput {
  dayWeek: EnumScheduleConfigDayWeek
  timeEnd: String
  timeStart: String
  user: UserWhereUniqueInput
}

input ScheduleConfigUpdateManyWithoutUsersInput {
  connect: [ScheduleConfigWhereUniqueInput!]
  disconnect: [ScheduleConfigWhereUniqueInput!]
  set: [ScheduleConfigWhereUniqueInput!]
}

input ScheduleConfigWhereInput {
  dayWeek: EnumScheduleConfigDayWeek
  id: StringFilter
  timeEnd: StringFilter
  timeStart: StringFilter
  user: UserWhereUniqueInput
}

input ScheduleConfigWhereUniqueInput {
  id: String!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Theme {
  createdAt: DateTime!
  description: String
  id: String!
  name: String!
  updatedAt: DateTime!
  usuarioTemas(orderBy: [UsuarioTemaOrderByInput!], skip: Float, take: Float, where: UsuarioTemaWhereInput): [UsuarioTema!]!
}

input ThemeCreateInput {
  description: String
  name: String!
  usuarioTemas: UsuarioTemaCreateNestedManyWithoutThemesInput
}

input ThemeOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ThemeUpdateInput {
  description: String
  name: String
  usuarioTemas: UsuarioTemaUpdateManyWithoutThemesInput
}

input ThemeWhereInput {
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  usuarioTemas: UsuarioTemaListRelationFilter
}

input ThemeWhereUniqueInput {
  id: String!
}

type User {
  avatar: String
  bio: String
  createdAt: DateTime!
  email: String!
  id: String!
  name: String
  roles: [String!]!
  scheduleConfigs(orderBy: [ScheduleConfigOrderByInput!], skip: Float, take: Float, where: ScheduleConfigWhereInput): [ScheduleConfig!]!
  updatedAt: DateTime!
  username: String!
  usuarioTemas(orderBy: [UsuarioTemaOrderByInput!], skip: Float, take: Float, where: UsuarioTemaWhereInput): [UsuarioTema!]!
}

input UserCreateInput {
  avatar: String
  bio: String
  email: String!
  name: String
  password: String!
  roles: [String!]!
  scheduleConfigs: ScheduleConfigCreateNestedManyWithoutUsersInput
  username: String!
  usuarioTemas: UsuarioTemaCreateNestedManyWithoutUsersInput
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  avatar: SortOrder
  bio: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  avatar: String
  bio: String
  email: String
  name: String
  password: String
  roles: [String!]
  scheduleConfigs: ScheduleConfigUpdateManyWithoutUsersInput
  username: String
  usuarioTemas: UsuarioTemaUpdateManyWithoutUsersInput
}

input UserWhereInput {
  avatar: StringNullableFilter
  bio: StringNullableFilter
  email: StringFilter
  id: StringFilter
  name: StringNullableFilter
  scheduleConfigs: ScheduleConfigListRelationFilter
  username: StringFilter
  usuarioTemas: UsuarioTemaListRelationFilter
}

input UserWhereUniqueInput {
  id: String!
}

type UsuarioTema {
  createdAt: DateTime!
  id: String!
  theme: Theme
  updatedAt: DateTime!
  user: User
}

input UsuarioTemaCreateInput {
  theme: ThemeWhereUniqueInput
  user: UserWhereUniqueInput
}

input UsuarioTemaCreateNestedManyWithoutThemesInput {
  connect: [UsuarioTemaWhereUniqueInput!]
}

input UsuarioTemaCreateNestedManyWithoutUsersInput {
  connect: [UsuarioTemaWhereUniqueInput!]
}

input UsuarioTemaListRelationFilter {
  every: UsuarioTemaWhereInput
  none: UsuarioTemaWhereInput
  some: UsuarioTemaWhereInput
}

input UsuarioTemaOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  themeId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UsuarioTemaUpdateInput {
  theme: ThemeWhereUniqueInput
  user: UserWhereUniqueInput
}

input UsuarioTemaUpdateManyWithoutThemesInput {
  connect: [UsuarioTemaWhereUniqueInput!]
  disconnect: [UsuarioTemaWhereUniqueInput!]
  set: [UsuarioTemaWhereUniqueInput!]
}

input UsuarioTemaUpdateManyWithoutUsersInput {
  connect: [UsuarioTemaWhereUniqueInput!]
  disconnect: [UsuarioTemaWhereUniqueInput!]
  set: [UsuarioTemaWhereUniqueInput!]
}

input UsuarioTemaWhereInput {
  id: StringFilter
  theme: ThemeWhereUniqueInput
  user: UserWhereUniqueInput
}

input UsuarioTemaWhereUniqueInput {
  id: String!
}
